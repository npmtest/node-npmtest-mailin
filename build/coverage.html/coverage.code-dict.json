{"/home/travis/build/npmtest/node-npmtest-mailin/test.js":"/* istanbul instrument in package npmtest_mailin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailin/lib.npmtest_mailin.js":"/* istanbul instrument in package npmtest_mailin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailin = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailin = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailin/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailin && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailin */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailin\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailin.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mailin.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailin.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mailin.__dirname + '/lib.npmtest_mailin.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/index.js":"'use strict';\nvar semver = require('semver');\nvar pkg = require('./package.json');\n\n/* Check compatibility with versions of node and iojs. */\nif (!semver.satisfies(process.version, '~0.12.0') &&\n    !semver.satisfies(process.version, '>=2.0.0')) {\n    console.log('\\n*****\\nYour current node version (' + process.version +\n        ') is not compatible with Mailin v' + pkg.version +\n        ' which requires ' + pkg.engine +\n        '.\\nIf you are running an older version of node, please consider installing ' +\n        'Mailin ^2.0.0 (npm install mailin@2.0.0).\\n' +\n        'Love,\\nthe Mailin maintainers. \\n*****\\n');\n}\n\nvar mailin = require('./lib/mailin');\nmodule.exports = mailin;\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/lib/mailin.js":"'use strict';\n\nvar LanguageDetect = require('languagedetect');\nvar MailParser = require('mailparser').MailParser;\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar htmlToText = require('html-to-text');\nvar events = require('events');\nvar fs = Promise.promisifyAll(require('fs'));\nvar path = require('path');\nvar request = require('superagent');\nvar shell = require('shelljs');\nvar util = require('util');\nvar SMTPServer = require('smtp-server').SMTPServer;\nvar uuid = require('node-uuid');\nvar dns = require('dns');\nvar extend = require('extend');\n\nvar logger = require('./logger');\nvar mailUtilities = Promise.promisifyAll(require('./mailUtilities'));\n\nvar Mailin = function () {\n    events.EventEmitter.call(this);\n\n    /* Set up the default options. */\n    this.configuration = {\n        host: '0.0.0.0',\n        port: 2500,\n        tmp: '.tmp',\n        webhook: 'http://localhost:3000/webhook',\n        disableWebhook: false,\n        logFile: null,\n        disableDkim: false,\n        disableSpf: false,\n        disableSpamScore: false,\n        verbose: false,\n        debug: false,\n        logLevel: 'info',\n        profile: false,\n        disableDNSValidation: true,\n        smtpOptions: {\n            banner: 'Mailin Smtp Server',\n            logger: false,\n            disabledCommands: ['AUTH']\n        }\n    };\n\n    /* The simplesmtp server instance, 'exposed' as an undocuumented, private\n     * member. It is not meant for normal usage, but is can be uuseful for\n     * Mailin hacking.\n     * The instance will be initialized only after that mailin.start() has been called. */\n    this._smtp = null;\n};\nutil.inherits(Mailin, events.EventEmitter);\n\nMailin.prototype.start = function (options, callback) {\n    var _this = this;\n\n    options = options || {};\n    if (_.isFunction(options)) {\n        callback = options;\n        options = {};\n    }\n\n    var configuration = this.configuration;\n    extend(true, configuration, options);\n    configuration.smtpOptions.secure = Boolean(configuration.smtpOptions.secure);\n\n    callback = callback || function () {};\n\n    /* Create tmp dir if necessary. */\n    if (!fs.existsSync(configuration.tmp)) {\n        shell.mkdir('-p', configuration.tmp);\n    }\n\n    /* Log to a file if necessary. */\n    if (configuration.logFile) {\n        logger.setLogFile(configuration.logFile);\n    }\n\n    /* Set log level if necessary. */\n    if (configuration.logLevel) {\n        logger.setLevel(configuration.logLevel);\n    }\n\n    if (configuration.verbose) {\n        logger.setLevel('verbose');\n        logger.info('Log level set to verbose.');\n    }\n\n    if (configuration.debug) {\n        logger.info('Debug option activated.');\n        logger.setLevel('debug');\n\n        /* Enable debug for the simplesmtp server as well. */\n        configuration.smtpOptions.debug = true;\n    }\n\n    /* Basic memory profiling. */\n    if (configuration.profile) {\n        logger.info('Enable memory profiling');\n        setInterval(function () {\n            var memoryUsage = process.memoryUsage();\n            var ram = memoryUsage.rss + memoryUsage.heapUsed;\n            var million = 1000000;\n            logger.info('Ram Usage: ' + ram / million + 'mb | rss: ' + memoryUsage.rss / million +\n                'mb | heapTotal: ' + memoryUsage.heapTotal / million +\n                'mb | heapUsed: ' + memoryUsage.heapUsed / million);\n        }, 500);\n    }\n\n    /* Check the webhook validity. */\n    if (!configuration.disableWebhook) {\n        var url = configuration.webhook;\n        request\n            .head(url)\n            .timeout(3000)\n            .end(function (err, resp) {\n                if (err || resp.statusCode !== 200) {\n                    logger.warn('Webhook ' + configuration.webhook +\n                        ' seems invalid or down. You may want to double check the webhook url.');\n                } else {\n                    logger.info('Webhook ' + configuration.webhook + ' is valid, up and running.');\n                }\n            });\n    }\n\n    function validateAddress(addressType, email, envelope) {\n        return new Promise(function (resolve, reject) {\n            if (configuration.disableDnsLookup) {\n                return resolve();\n            }\n            try {\n                var validateEvent,\n                    validationFailedEvent,\n                    dnsErrorMessage,\n                    localErrorMessage;\n\n\n                if (addressType === 'sender') {\n                    validateEvent = 'validateSender';\n                    validationFailedEvent = 'senderValidationFailed';\n                    dnsErrorMessage = '450 4.1.8 <' + email + '>: Sender address rejected: Domain not found';\n                    localErrorMessage = '550 5.1.1 <' + email + '>: Sender address rejected: User unknown in local sender table';\n                } else if (addressType === 'recipient') {\n                    validateEvent = 'validateRecipient';\n                    validationFailedEvent = 'recipientValidationFailed';\n                    dnsErrorMessage = '450 4.1.8 <' + email + '>: Recipient address rejected: Domain not found';\n                    localErrorMessage = '550 5.1.1 <' + email + '>: Recipient address rejected: User unknown in local recipient table';\n                } else {\n                    // How are internal errors handled?\n                    return reject(new Error('Address type not supported'));\n                }\n\n                if (!email) {\n                    return reject(new Error(localErrorMessage));\n                }\n\n                var domain = /@(.*)/.exec(email)[1];\n\n                var validateViaLocal = function () {\n                    if (_this.listeners(validateEvent).length) {\n                        _this.emit(validateEvent, envelope, email, (function (err) {\n                            if (err) {\n                                _this.emit(validationFailedEvent, email);\n                                return reject(new Error(localErrorMessage));\n                            } else {\n                                return resolve();\n                            }\n                        }));\n                    } else {\n                        return resolve();\n                    }\n                };\n\n                var validateViaDNS = function () {\n                    try {\n                        dns.resolveMx(domain, (function (err, addresses) {\n                            if (err || !addresses || !addresses.length) {\n                                _this.emit(validationFailedEvent, email);\n                                return reject(new Error(dnsErrorMessage));\n                            }\n                            validateViaLocal();\n                        }));\n                    } catch (e) {\n                        return reject(e);\n                    }\n                };\n\n                if (configuration.disableDNSValidation) {\n                    validateViaLocal();\n                } else {\n                    validateViaDNS();\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n    }\n\n\n    function dataReady(connection) {\n        logger.info(connection.id + ' Processing message from ' + connection.envelope.mailFrom.address);\n\n        return retrieveRawEmail(connection)\n            .then(function (rawEmail) {\n                return Promise.all([\n                    rawEmail,\n                    validateDkim(connection, rawEmail),\n                    validateSpf(connection),\n                    computeSpamScore(connection, rawEmail),\n                    parseEmail(connection)\n                ]);\n            })\n            .spread(function (rawEmail, isDkimValid, isSpfValid, spamScore, parsedEmail) {\n                return Promise.all([\n                    connection,\n                    rawEmail,\n                    isDkimValid,\n                    isSpfValid,\n                    spamScore,\n                    parsedEmail,\n                    detectLanguage(connection, parsedEmail.text)\n                ]);\n            })\n            .spread(finalizeMessage)\n            .then(postWebhook.bind(null, connection))\n            .then(unlinkFile.bind(null, connection))\n            .catch(function (error) {\n                logger.error(connection.id + ' Unable to finish processing message!!', error);\n                logger.error(error);\n                throw error;\n            });\n    }\n\n    function retrieveRawEmail(connection) {\n        return fs.readFileAsync(connection.mailPath)\n            .then(function (rawEmail) {\n                return rawEmail.toString();\n            });\n    }\n\n    function validateDkim(connection, rawEmail) {\n        if (configuration.disableDkim) {\n            return Promise.resolve(false);\n        }\n\n        logger.verbose(connection.id + ' Validating dkim.');\n\n        return mailUtilities.validateDkimAsync(rawEmail)\n            .catch(function (err) {\n                logger.error(connection.id + ' Unable to validate dkim. Consider dkim as failed.');\n                logger.error(err);\n                return false;\n            });\n    }\n\n    function validateSpf(connection) {\n        if (configuration.disableSpf) {\n            return Promise.resolve(false);\n        }\n\n        logger.verbose(connection.id + ' Validating spf.');\n        /* Get ip and host. */\n        return mailUtilities.validateSpfAsync(connection.remoteAddress, connection.from, connection.clientHostname)\n            .catch(function (err) {\n                logger.error(connection.id + ' Unable to validate spf. Consider spf as failed.');\n                logger.error(err);\n                return false;\n            });\n    }\n\n    function computeSpamScore(connection, rawEmail) {\n        if (configuration.disableSpamScore) {\n            return Promise.resolve(0.0);\n        }\n\n        return mailUtilities.computeSpamScoreAsync(rawEmail)\n            .catch(function (err) {\n                logger.error(connection.id + ' Unable to compute spam score. Set spam score to 0.');\n                logger.error(err);\n                return 0.0;\n            });\n    }\n\n    function parseEmail(connection) {\n        return new Promise(function (resolve) {\n            logger.verbose(connection.id + ' Parsing email.');\n            /* Prepare the mail parser. */\n            var mailParser = new MailParser();\n\n\n            mailParser.on('end', function (mail) {\n                // logger.verbose(util.inspect(mail, {\n                // depth: 5\n                // }));\n\n                /* Make sure that both text and html versions of the\n                 * body are available. */\n                if (!mail.text && !mail.html) {\n                    mail.text = '';\n                    mail.html = '<div></div>';\n                } else if (!mail.html) {\n                    mail.html = _this._convertTextToHtml(mail.text);\n                } else if (!mail.text) {\n                    mail.text = _this._convertHtmlToText(mail.html);\n                }\n\n                return resolve(mail);\n            });\n\n            /* Stream the written email to the parser. */\n            fs.createReadStream(connection.mailPath).pipe(mailParser);\n        });\n    }\n\n    function detectLanguage(connection, text) {\n        logger.verbose(connection.id + ' Detecting language.');\n\n        var language = '';\n        var languageDetector = new LanguageDetect();\n        var potentialLanguages = languageDetector.detect(text, 2);\n        if (potentialLanguages.length !== 0) {\n            logger.verbose('Potential languages: ' + util.inspect(potentialLanguages, {\n                depth: 5\n            }));\n\n            /* Use the first detected language.\n             * potentialLanguages = [['english', 0.5969], ['hungarian', 0.40563]] */\n            language = potentialLanguages[0][0];\n        } else {\n            logger.info(connection.id + ' Unable to detect language for the current message.');\n        }\n\n        return language;\n    }\n\n    function finalizeMessage(connection, rawEmail, isDkimValid, isSpfValid, spamScore, parsedEmail, language) {\n\n        /* Finalize the parsed email object. */\n        parsedEmail.dkim = isDkimValid ? 'pass' : 'failed';\n        parsedEmail.spf = isSpfValid ? 'pass' : 'failed';\n        parsedEmail.spamScore = spamScore;\n        parsedEmail.language = language;\n\n        /* Make fields exist, even if empty. That will make\n         * json easier to use on the webhook receiver side. */\n        parsedEmail.cc = parsedEmail.cc || [];\n        parsedEmail.attachments = parsedEmail.attachments || [];\n\n        /* Add the connection authentication to the parsedEmail. */\n        parsedEmail.connection = connection;\n\n        /* Add envelope data to the parsedEmail. */\n        parsedEmail.envelopeFrom = connection.envelope.mailFrom;\n        parsedEmail.envelopeTo = connection.envelope.rcptTo;\n\n        _this.emit('message', connection, parsedEmail, rawEmail);\n\n        return parsedEmail;\n    }\n\n    function postWebhook(connection, finalizedMessage) {\n        return new Promise(function (resolve) {\n            if (configuration.disableWebhook) return resolve();\n\n            logger.info(connection.id + ' Sending request to webhook ' + configuration.webhook);\n\n            /* Convert the attachments contents from Buffer to\n             * base64 encoded strings and remove them from the\n             * message. They will be posted as multipart of a form\n             * as key values pairs (attachmentName, attachmentContent). */\n            logger.profile('Convert attachments to strings');\n            var attachmentNamesAndContent = {};\n            finalizedMessage.attachments.forEach(function (attachment) {\n                attachmentNamesAndContent[attachment.generatedFileName] = (attachment.content || Buffer('')).toString('base64');\n                delete attachment.content;\n            });\n            logger.profile('Convert attachments to strings');\n\n            logger.debug(finalizedMessage);\n\n            var req = request.post(configuration.webhook);\n            req.field('mailinMsg', JSON.stringify(finalizedMessage));\n\n            _.forEach(attachmentNamesAndContent, function (content, name) {\n                req.field(name, content);\n            });\n\n            req.end(function (err, resp) {\n                /* Avoid memory leak by hinting the gc. */\n\n                if (err || resp.statusCode !== 200) {\n                    logger.error(connection.id + ' Error in posting to webhook ' + configuration.webhook);\n                    if (resp) {\n                        logger.error(connection.id + ' Response status code: ' + resp.statusCode);\n                    }\n                    return resolve();\n                }\n\n                logger.info(connection.id + ' Succesfully posted to webhook ' + configuration.webhook);\n                logger.debug(resp.text);\n                return resolve();\n            });\n        });\n    }\n\n    function unlinkFile(connection) {\n        /* Don't forget to unlink the tmp file. */\n        return fs.unlinkAsync(connection.mailPath)\n            .then(function () {\n                logger.info(connection.id + ' End processing message, deleted ' + connection.mailPath);\n                return;\n            });\n    }\n\n\n    var _session;\n\n    function onData(stream, session, callback) {\n        _session = session;\n        var connection = _.cloneDeep(session);\n        connection.id = uuid.v4();\n        var mailPath = path.join(configuration.tmp, connection.id);\n        connection.mailPath = mailPath;\n\n        _this.emit('startData', connection);\n        logger.verbose('Connection id ' + connection.id);\n        logger.info(connection.id + ' Receiving message from ' + connection.envelope.mailFrom.address);\n\n        _this.emit('startMessage', connection);\n\n        stream.pipe(fs.createWriteStream(mailPath));\n\n        stream.on('data', function (chunk) {\n            _this.emit('data', connection, chunk);\n        });\n\n        stream.on('end', function () {\n            dataReady(connection);\n            callback();\n        });\n\n        stream.on('close', function () {\n            _this.emit('close', connection);\n        });\n\n        stream.on('error', function (error) {\n            _this.emit('error', connection, error);\n        });\n    }\n\n    function onAuth(auth, session, streamCallback) {\n        if (_this.emit('authorizeUser', session, auth.username, auth.password, streamCallback)) {\n            streamCallback(new Error('Unauthorized user'));\n        }\n    }\n\n    function onMailFrom(address, session, streamCallback) {\n        _this.emit('validateSender', session, address.address, streamCallback);\n        var ack = function (err) {\n            streamCallback(err);\n        };\n        validateAddress('sender', address.address, session.envelope)\n            .then(ack)\n            .catch(ack);\n    }\n\n    function onRcptTo(address, session, streamCallback) {\n        var ack = function (err) {\n            streamCallback(err);\n        };\n        _this.emit('validateRecipient', session, address.address, callback);\n        validateAddress('recipient', address.address, session.envelope)\n            .then(ack)\n            .catch(ack);\n    }\n\n\n    var smtpOptions = _.extend({}, configuration.smtpOptions || {}, {\n        onData: onData,\n        onAuth: onAuth,\n        onMailFrom: onMailFrom,\n        onRcptTo: onRcptTo\n    });\n\n\n    var server = new SMTPServer(smtpOptions);\n\n    this._smtp = server;\n\n    server.listen(configuration.port, configuration.host, function (err) {\n        if (!err) {\n            logger.info('Mailin Smtp server listening on port ' + configuration.port);\n        } else {\n            callback(err);\n            logger.error('Could not start server on port ' + configuration.port + '.');\n            if (configuration.port < 1000) {\n                logger.error('Ports under 1000 require root privileges.');\n            }\n\n            if (configuration.logFile) {\n                logger.error('Do you have write access to log file ' +\n                    configuration.logFile + '?');\n            }\n\n            logger.error(err.message);\n        }\n    });\n\n\n    server.on('close', function () {\n        logger.info('Closing smtp server');\n        _this.emit('close', _session);\n    });\n\n    server.on('error', function (error) {\n        logger.error(error);\n        _this.emit('error', _session, error);\n    });\n\n    callback();\n};\n\nMailin.prototype.stop = function (callback) {\n    callback = callback || function () {};\n    logger.info('Stopping mailin.');\n\n    /* FIXME A bug in the RAI module prevents the callback to be called, so\n     * call end and call the callback directly. */\n    this._smtp.close(callback);\n    callback();\n};\n\nMailin.prototype._convertTextToHtml = function (text) {\n    /* Replace newlines by <br>. */\n    text = text.replace(/(\\n\\r)|(\\n)/g, '<br>');\n    /* Remove <br> at the begining. */\n    text = text.replace(/^\\s*(<br>)*\\s*/, '');\n    /* Remove <br> at the end. */\n    text = text.replace(/\\s*(<br>)*\\s*$/, '');\n\n    return text;\n};\n\n\n\nMailin.prototype._convertHtmlToText = function (html) {\n    return htmlToText.fromString(html);\n};\n\nmodule.exports = new Mailin();\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/lib/logger.js":"'use strict';\n\nvar _ = require('lodash');\nvar util = require('util');\nvar winston = require('winston');\n\n/* By default, only log to the console. To log to a file as well, a log file\n * path should be added explicitly. The logger object exposes the log, info,\n * warn and error methods. */\nvar logger = new(winston.Logger)({\n    transports: [\n        new(winston.transports.Console)({\n            colorize: true,\n            prettyPrint: true\n        })\n    ]\n});\n\nlogger.setLogFile = function (logFilePath) {\n    this.add(winston.transports.File, {\n        filename: logFilePath,\n        json: false,\n        maxsize: 20000000,\n        timestamp: true\n    });\n};\n\n/* Parameter level is one of 'silly', 'verbose', 'debug', 'info', 'warn',\n * 'error'. */\nlogger.setLevel = function (level) {\n    if (['silly', 'verbose', 'debug', 'info', 'warn', 'error'].indexOf(level) === -1) {\n        logger.error('Unable to set logging level to unknown level \"' + level + '\".');\n    } else {\n        /* Verbose and debug have not exactly the same semantic in Mailin and\n         * Winston, so handle that. */\n        if (logger.transports.console.level === 'verbose' &&\n            level === 'debug') {\n            return;\n        }\n\n        logger.transports.console.level = level;\n\n        if (logger.transports.file) logger.transports.file.level = level;\n    }\n};\n\nlogger._error = logger.error;\nlogger.error = function (err) {\n    if (err.stack) {\n        this._error(err.stack);\n    } else if (!_.isString(err)) {\n        this._error(util.inspect(err, {\n            depth: 5\n        }));\n    } else {\n        this._error.apply(this, arguments);\n    }\n};\n\nmodule.exports = logger;\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/lib/mailUtilities.js":"'use strict';\n\nvar child_process = require('child_process');\nvar shell = require('shelljs');\nvar logger = require('./logger');\nvar path = require('path');\nvar Spamc = require('spamc');\nvar spamc = new Spamc();\n\n/* Verify Python availability. */\nvar isPythonAvailable = shell.which('python');\nif (!isPythonAvailable) {\n    logger.warn('Python is not available. Dkim and spf checking is disabled.');\n}\n\n/* Verify spamc/spamassassin availability. */\nvar isSpamcAvailable = true;\nif (!shell.which('spamassassin') || !shell.which('spamc')) {\n    logger.warn('Either spamassassin or spamc are not available. Spam score computation is disabled.');\n    isSpamcAvailable = false;\n}\n\n/* Provides high level mail utilities such as checking dkim, spf and computing\n * a spam score. */\nmodule.exports = {\n    /* @param rawEmail is the full raw mime email as a string. */\n    validateDkim: function (rawEmail, callback) {\n        if (!isPythonAvailable) {\n            return callback(null, false);\n        }\n\n        var verifyDkimPath = path.join(__dirname, '../python/verifydkim.py');\n        var verifyDkim = child_process.spawn('python', [verifyDkimPath]);\n\n        verifyDkim.stdout.on('data', function (data) {\n            logger.verbose(data.toString());\n        });\n\n        verifyDkim.on('close', function (code) {\n            logger.verbose('closed with return code ' + code);\n            /* Convert return code to appropriate boolean. */\n            return callback(null, !!!code);\n        });\n\n        verifyDkim.stdin.write(rawEmail);\n        verifyDkim.stdin.end();\n    },\n\n    validateSpf: function (ip, address, host, callback) {\n        if (!isPythonAvailable) {\n            return callback(null, false);\n        }\n\n        var verifySpfPath = path.join(__dirname, '../python/verifyspf.py');\n        var cmd = 'python ' + verifySpfPath + ' ' + ip + ' ' + address + ' ' + host;\n        child_process.exec(cmd, function (err, stdout) {\n            logger.verbose(stdout);\n            var code = 0;\n            if (err) {\n                code = err.code;\n            }\n\n            logger.verbose('closed with return code ' + code);\n\n            /* Convert return code to appropriate boolean. */\n            return callback(null, !!!code);\n        });\n    },\n\n    /* @param rawEmail is the full raw mime email as a string. */\n    computeSpamScore: function (rawEmail, callback) {\n        if (!isSpamcAvailable) {\n            return callback(null, 0.0);\n        }\n\n        spamc.report(rawEmail, function (err, result) {\n            logger.verbose(result);\n            if (err) logger.error(err);\n            if (err) return callback(new Error('Unable to compute spam score.'));\n            callback(null, result.spamScore);\n        });\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/cli.js":"#!/usr/bin/env node\n'use strict';\n\nvar logger = require('./lib/logger');\nvar mailin = require('./index');\nvar program = require('commander');\n\nfunction collectOptions(keyValue, options) {\n    if (!keyValue || keyValue.indexOf(':') < 0) {\n        logger.error('Ignoring option '  + keyValue);\n        return options;\n    }\n    options = options || {};\n    var split = keyValue.split(':');\n    options[split[0]] = split[1];\n    return options;\n}\n\nfunction list(val) {\n    return val.split(',');\n}\n\nvar pkg = require('./package.json');\n\nprogram.version(pkg.version)\n    .option('-p, --port <n>', 'The port to which the mailin smtp server should listen to. Default to 25.', parseInt)\n    .option('-i, --host <n>', 'The host ip on which the mailin smtp server should accept connections. Default to any valid address.')\n    .option('-w, --webhook [url]', 'The webhook url to which the parsed emails are posted. Default to http://localhost:3000/webhook.')\n    .option('-l, --log-file [file path]', \"The log file path. Default to '/var/log/mailin.log'.\")\n    .option('--disable-dkim', 'Disable dkim checking. The dkim field in the webhook payload will be set to false.')\n    .option('--disable-spf', 'Disable spf checking. The spf field in the webhook payload will be set to false.')\n    .option('--disable-spam-score', 'Disable spam score computation. The spamScore field in the webhook payload will be set to 0.0.')\n    .option('--verbose', 'Set the logging level to verbose.')\n    .option('--debug', 'Printout debug info such as the smtp commands.')\n    .option('--profile', 'Enable basic memory usage profiling.')\n    .option('--enable-dns-validation', 'Enable DNS domain lookup')\n    .option('--disabled-smtp-commands [value]', 'smtp disabled commands list, comma separated', list)\n    .option('--smtp [value]', 'smtp options split with :, check https://github.com/andris9/smtp-server/tree/v1.4.0', collectOptions, {});\n\n/* Hack the argv object so that commander thinks that this script is called\n * 'mailin'. The help info will look nicer. */\nprocess.argv[1] = 'mailin';\nprogram.parse(process.argv);\n\nlogger.info('Mailin v' + pkg.version);\n\nvar smtpOptions = program.smtp;\nsmtpOptions.disabledCommands = program.disabledSmtpCommands;\n\nmailin.start({\n    port: program.port || 25,\n    host: program.host || '0.0.0.0',\n    webhook: program.webhook || 'http://localhost:3000/webhook',\n    logFile: program.logFile || '/var/log/mailin.log',\n    disableDkim: program.disableDkim,\n    disableSpf: program.disableSpf,\n    disableSpamScore: program.disableSpamScore,\n    verbose: program.verbose,\n    debug: program.debug,\n    profile: program.profile,\n    disableDNSValidation: !program.enableDnsValidation,\n    smtpOptions: smtpOptions\n}, function (err) {\n    if (err) process.exit(1);\n\n    logger.info('Webhook url: ' + mailin.configuration.webhook);\n\n    if (mailin.configuration.logFile) logger.info('Log file: ' + mailin.configuration.logFile);\n\n    if (mailin.configuration.disableDkim) logger.info('Dkim checking is disabled');\n    if (mailin.configuration.disableSpf) logger.info('Spf checking is disabled');\n    if (mailin.configuration.disableSpamScore) logger.info('Spam score computation is disabled');\n});\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/Gruntfile.js":"'use strict';\n\nvar fs = require('fs');\n\nmodule.exports = function (grunt) {\n\n    // Load .jshintrc file.\n    var hintOptions = JSON.parse(fs.readFileSync('.jshintrc', 'utf8'));\n\n    grunt.loadNpmTasks('grunt-jsbeautifier');\n    grunt.loadNpmTasks('grunt-contrib-jshint');\n\n    grunt.loadNpmTasks('grunt-mocha-test');\n\n    // Project configuration.\n    grunt.initConfig({\n        pkg: grunt.file.readJSON('package.json'),\n\n        jsfiles: [\n            'Gruntfile.js',\n            'index.js',\n            'lib/**/*.js',\n            'test/**/*.js',\n            '!node_modules/**/*.js'\n        ],\n\n        jsbeautifier: {\n            files: ['<%= jsfiles %>'],\n            options: {\n                js: {\n                    spaceAfterAnonFunction: true\n                }\n            }\n        },\n\n        jshint: {\n            options: hintOptions,\n            files: ['<%= jsfiles %>']\n        },\n\n        mochaTest: {\n            test: {\n                options: {\n                    reporter: 'spec'\n                },\n                src: ['test/**/*Spec.js']\n            }\n        },\n\n        watch: {\n            files: ['<%= jsfiles %>'],\n            tasks: ['test']\n        }\n    });\n\n    grunt.registerTask('lint', [\n        'jsbeautifier',\n        'jshint'\n    ]);\n\n    grunt.registerTask('test', [\n        'lint',\n        'mochaTest'\n    ]);\n};\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/run-cli.js":"#!/usr/bin/env node\n'use strict';\n\nvar forever = require('forever-monitor');\nvar logger = require('./lib/logger');\nvar path = require('path');\n\nvar pkg = require('./package.json');\n\nvar restartCount = 0;\nvar mailinProcess = new (forever.Monitor)(path.join(__dirname, 'cli.js'), {\n    max: 1000,\n    minUptime: 10000,\n    args: process.argv.slice(2)\n});\n\nmailinProcess.on('error', function (err) {\n    logger.error('Error caused Mailin to crash.');\n    logger.error('Please report this to ' + pkg.bugs.url);\n    logger.error(err);\n    logger.info();\n    logger.info();\n});\n\nmailinProcess.on('restart', function () {\n    logger.warn('It is likely that an error caused Mailin to crash.');\n    logger.warn('Please report this to ' + pkg.bugs.url);\n    logger.warn('Mailin restarted.');\n\n    ++restartCount;\n    logger.warn('Restart count: ' + restartCount);\n\n    logger.info();\n    logger.info();\n});\n\nmailinProcess.on('exit', function () {\n    logger.info('Mailin stopped.');\n});\n\nmailinProcess.start();\n","/home/travis/build/npmtest/node-npmtest-mailin/node_modules/mailin/samples/server.js":"'use strict';\n\nvar async = require('async');\nvar express = require('express');\nvar fs = require('fs');\nvar multiparty = require('multiparty');\nvar util = require('util');\n\n\n/* Make an http server to receive the webhook. */\nvar server = express();\n\nserver.head('/webhook', function (req, res) {\n    console.log('Received head request from webhook.');\n    res.send(200);\n});\n\nserver.post('/webhook', function (req, res) {\n    console.log('Receiving webhook.');\n\n    /* Respond early to avoid timouting the mailin server. */\n    // res.send(200);\n\n    /* Parse the multipart form. The attachments are parsed into fields and can\n     * be huge, so set the maxFieldsSize accordingly. */\n    var form = new multiparty.Form({\n        maxFieldsSize: 70000000\n    });\n\n    form.on('progress', function () {\n        var start = Date.now();\n        var lastDisplayedPercentage = -1;\n        return function (bytesReceived, bytesExpected) {\n            var elapsed = Date.now() - start;\n            var percentage = Math.floor(bytesReceived / bytesExpected * 100);\n            if (percentage % 20 === 0 && percentage !== lastDisplayedPercentage) {\n                lastDisplayedPercentage = percentage;\n                console.log('Form upload progress ' +\n                    percentage + '% of ' + bytesExpected / 1000000 + 'Mb. ' + elapsed + 'ms');\n            }\n        };\n    }());\n\n    form.parse(req, function (err, fields) {\n        console.log(util.inspect(fields.mailinMsg, {\n            depth: 5\n        }));\n\n        console.log('Parsed fields: ' + Object.keys(fields));\n\n        /* Write down the payload for ulterior inspection. */\n        async.auto({\n            writeParsedMessage: function (cbAuto) {\n                fs.writeFile('payload.json', fields.mailinMsg, cbAuto);\n            },\n            writeAttachments: function (cbAuto) {\n                var msg = JSON.parse(fields.mailinMsg);\n                async.eachLimit(msg.attachments, 3, function (attachment, cbEach) {\n                    fs.writeFile(attachment.generatedFileName, fields[attachment.generatedFileName], 'base64', cbEach);\n                }, cbAuto);\n            }\n        }, function (err) {\n            if (err) {\n                console.log(err.stack);\n                res.send(500, 'Unable to write payload');\n            } else {\n                console.log('Webhook payload written.');\n                res.send(200);\n            }\n        });\n    });\n});\n\nserver.listen(3000, function (err) {\n    if (err) {\n        console.log(err);\n    } else {\n        console.log('Http server listening on port 3000');\n    }\n});\n\n"}